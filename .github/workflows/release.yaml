name: Build and Tag

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  BINARY_NAME: berastribute
  TARGET: x86_64-unknown-linux-gnu
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pixz

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.TARGET }}
          override: true
          profile: minimal

      - name: Build binary
        run: |
          cargo build --release --target ${{ env.TARGET }}
          cp target/${{ env.TARGET }}/release/${{ env.BINARY_NAME }} .

      - name: Create archive
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION=$(npx semantic-release --dry-run --no-ci | grep "The next release version is" | cut -d' ' -f6)
          VERSION_UNDERSCORE=$(echo $VERSION | sed 's/\./_/g')
          ARCHIVE_NAME="${BINARY_NAME}-${VERSION_UNDERSCORE}-${TARGET}.txz"
          tar -Ipixz -cf "${ARCHIVE_NAME}" "${BINARY_NAME}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: |
            ${{ env.ARCHIVE_NAME }}
            ${{ env.BINARY_NAME }}

  create-tag:
    name: Create Tag
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Get version
        id: get_version
        run: |
          VERSION=$(npx semantic-release --dry-run --no-ci | grep "The next release version is" | cut -d' ' -f6)
          if [ -z "$VERSION" ]; then
            echo "No new version to release"
            exit 0
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag
        if: steps.get_version.outputs.version != ''
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}
